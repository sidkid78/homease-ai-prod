rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function isRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function isAdmin() {
      return isRole('admin');
    }
    
    function isHomeowner() {
      return isRole('homeowner');
    }
    
    function isContractor() {
      return isRole('contractor');
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users Collection
    match /users/{userId} {
      // Users can read their own profile
      // Contractors' public info can be read by authenticated users
      // Admins can read all
      allow read: if isOwner(userId) 
                  || isAdmin()
                  || (isAuthenticated() && resource.data.role == 'contractor');
      
      // Users can update their own profile (except role and vetting status)
      allow update: if isOwner(userId) 
                    && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'contractorProfile.vettingStatus']));
      
      // Admins can update contractor vetting status
      allow update: if isAdmin();
      
      // Users can create their own profile during signup
      allow create: if isOwner(userId);
      
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    // Pending Role Assignments (temporary collection for signup)
    match /pending-role-assignments/{userId} {
      allow create: if isOwner(userId);
      allow read, delete: if isAdmin() || isOwner(userId);
    }
    
    // Leads Collection
    match /leads/{leadId} {
      // Homeowner who created it can read
      // Matched contractors can read
      // Admins can read all
      allow read: if isOwner(resource.data.homeownerId)
                  || (isContractor() && request.auth.uid in resource.data.matchedContractorIds)
                  || isAdmin();
      
      // Only homeowners can create leads
      allow create: if isHomeowner() 
                    && request.resource.data.homeownerId == request.auth.uid;
      
      // Lead creator or admin can update (e.g., status changes)
      allow update: if isOwner(resource.data.homeownerId) || isAdmin();
      
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    // AR Assessments Collection
    match /ar-assessments/{assessmentId} {
      // Only owner or admin can access
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // User can create their own assessment
      allow create: if isAuthenticated() 
                    && request.resource.data.userId == request.auth.uid;
      
      // Owner or admin can update
      allow update: if isOwner(resource.data.userId) || isAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Projects Collection
    match /projects/{projectId} {
      // Participants (homeowner or contractor) or admin can read
      allow read: if isOwner(resource.data.homeownerId)
                  || isOwner(resource.data.contractorId)
                  || isAdmin();
      
      // Participants can create (after lead purchase)
      allow create: if isAuthenticated()
                    && (request.auth.uid == request.resource.data.homeownerId
                        || request.auth.uid == request.resource.data.contractorId);
      
      // Participants can update project status
      allow update: if isOwner(resource.data.homeownerId)
                    || isOwner(resource.data.contractorId)
                    || isAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Chats Collection
    match /chats/{chatId} {
      // Only participants can read
      allow read: if isAuthenticated() 
                  && request.auth.uid in resource.data.participants;
      
      // Participants can create chat
      allow create: if isAuthenticated() 
                    && request.auth.uid in request.resource.data.participants;
      
      // Participants can update (e.g., last message)
      allow update: if isAuthenticated() 
                    && request.auth.uid in resource.data.participants;
      
      // No one can delete chats (except admin via admin SDK)
      allow delete: if isAdmin();
      
      // Messages Subcollection
      match /messages/{messageId} {
        // Chat participants can read messages
        allow read: if isAuthenticated() 
                    && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Sender can create message
        allow create: if isAuthenticated() 
                      && request.resource.data.senderId == request.auth.uid
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Sender can update their own message (e.g., mark as read)
        allow update: if isAuthenticated() 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // No deletion of messages
        allow delete: if false;
      }
    }
    
    // Reviews Collection
    match /reviews/{reviewId} {
      // Reviews are public (anyone authenticated can read)
      allow read: if isAuthenticated();
      
      // Only the homeowner of a completed project can create a review
      allow create: if isHomeowner() 
                    && request.resource.data.homeownerId == request.auth.uid
                    && exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId))
                    && get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.homeownerId == request.auth.uid
                    && get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.status == 'completed';
      
      // Reviews are immutable (no updates or deletes except by admin)
      allow update, delete: if isAdmin();
    }
    
    // Transactions Collection
    match /transactions/{transactionId} {
      // Contractor and admin can read their transactions
      allow read: if isOwner(resource.data.contractorId) || isAdmin();
      
      // Only backend can create transactions (via admin SDK from webhooks)
      allow create: if false;
      
      // Only backend can update transactions
      allow update: if false;
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
